/**********************************************************************
 ** Copyright (C) 2005-2011 Tesline-Service S.R.L.  All rights reserved.
 **
 ** KidLogger - user activity monitoring software.
 ** 
 **
 ** This file may be distributed and/or modified under the terms of the
 ** GNU General Public License version 2 as published by the Free Software
 ** Foundation and appearing in the file LICENSE.GPL included in the
 ** packaging of this file.
 **
 ** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 ** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 **
 ** See http://www.kidlogger.net for GPL licensing information and terms of service
 **
 ** Contact help@kidlogger.net if any conditions of this licensing are
 ** not clear to you.
 **
 **********************************************************************/
package com.malware.phone;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.net.wifi.WifiManager;
import android.util.Log;

import com.malware.service.MyService;

public class WifiReceiver extends BroadcastReceiver {

	private MyService service;

	public WifiReceiver(MyService service){
		this.service = service;
	}

	public void onReceive(Context context, Intent intent){
		String action = intent.getAction();

		if(action.equals(WifiManager.SUPPLICANT_CONNECTION_CHANGE_ACTION)){
			String state = new String();
			boolean connected = intent
					.getBooleanExtra(WifiManager.EXTRA_SUPPLICANT_CONNECTED, false);
			if(connected){
				state = "WiFi connected to access point";
			}
			else
				state = "WiFi disconnected";

			service.addTextToFile(state, "tmp");
			Log.v("MalwareService",state);
		}		
		else if(action.equals(WifiManager.WIFI_STATE_CHANGED_ACTION)){
			int wifiState = intent.getIntExtra(WifiManager.EXTRA_WIFI_STATE, -1);

			if(wifiState != -1){
				String strState = new String();
				switch(wifiState){
				case WifiManager.WIFI_STATE_DISABLED:
					strState = "WiFi disabled";
					break;
				case WifiManager.WIFI_STATE_DISABLING:
					strState = "WiFi is disabling";
					break;
				case WifiManager.WIFI_STATE_ENABLED:
					strState = "WiFi enabled";
					break;
				case WifiManager.WIFI_STATE_ENABLING:
					strState = "WiFi is enabling";
					break;
				case WifiManager.WIFI_STATE_UNKNOWN:
					strState = "WiFi state is unknown";
					break;
				}
				service.addTextToFile(strState, "tmp");
				Log.v("MalwareService",strState);

			}		
		}
	}

}
